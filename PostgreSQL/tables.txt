=================================================Database=================================================

Database Name => flipkart


================================================Tables=====================================================

1. Customers:

sales=# select * from customers;
 id | first_name | last_name |   phone    |       email       |  city   | state | pincode 
----+------------+-----------+------------+-------------------+---------+-------+---------
  5 | aman       | sharma    | 9999002222 | aman@gmail.com    | gaya    | UP    |  351211
  6 | nitish     | kumar     | 9999000000 | nitish@gmail.com  | FBD     | HR    |  121004
  7 | mukesh     | sharma    | 9999015151 | mukesh@gmail.com  | jaipur  | RJ    |  121004
  8 | bindu      | devi      | 9999000151 | bindu@gmail.com   | ponda   | GOA   |  131204
  9 | rinkesh    |           | 9999000001 | rinkesh@gmail.com | ambala  | HR    |  121006
 10 | parkesh    | sharma    | 9999115522 | parkesh@gmail.com | sonipat | HR    |  131006
  1 | sagar      | sharma    | 9911991199 | sagar@gmail.com   | FBD     | HR    |  121001
  2 | neeraj     | sharma    | 6611881199 | neeraj@gmail.com  | FBD     | HR    |  121001
  3 | ram        |           | 6611001155 | ram@gmail.com     | gaya    | BR    |  351211
  4 | sita       | devi      | 9999001155 | sita@gmail.com    | gaya    | BR    |  351211
(10 rows)


2. Orders:

sales=# select * from orders;

 id | customer_id | order_status | order_date | shipped_date | store_id | staff_id 
----+-------------+--------------+------------+--------------+----------+----------
  1 |           1 | successful   | 2002-10-14 | 2002-10-21   |        1 |        1
  2 |           1 | successful   | 2008-08-11 | 2008-09-01   |        1 |        1
  4 |           2 | successful   | 2010-10-11 | 2010-10-12   |        4 |        4
  5 |           2 | successful   | 2012-12-11 | 2012-12-15   |        2 |        5
  6 |           3 | successful   | 2012-11-13 | 2012-11-15   |        3 |        2
  7 |           5 | successful   | 2010-11-13 | 2010-11-15   |        5 |        3
  8 |           5 | successful   | 2012-10-13 | 2012-11-10   |        5 |        4
  9 |           6 | successful   | 2021-01-13 | 2021-01-15   |        5 |        5
 10 |           7 | successful   | 2021-01-15 | 2021-01-20   |        4 |        2
 11 |           8 | successful   | 2020-12-15 | 2020-12-21   |        1 |        3
 12 |           9 | successful   | 2020-10-17 | 2020-10-19   |        3 |        1
  3 |           1 | successful   | 2010-09-11 | 2010-09-14   |        4 |        4
 13 |           9 | successful   | 2020-11-21 | 2021-03-14   |        2 |        5
(13 rows)


3. Staffs:

 sales=# select * from staffs;
 id | first_name | last_name |      email       |   phone    | active  | store_id 
----+------------+-----------+------------------+------------+---------+----------
  1 | sohan      | sharma    | sohan@gmail.com  | 9934112271 | present |        1
  2 | mohan      | sharma    | mohan@gmail.com  | 9934112272 | present |        2
  3 | rohan      | sharma    | rohan@gmail.com  | 9934112273 | present |        4
  4 | aman       | sharma    | aman@gmail.com   | 9934112274 | present |        3
  5 | nitish     | kumar     | nitish@gmail.com | 9934112275 | present |        5
(5 rows)



4. Order_items:

sales=# select * from order_items;
 id | order_id | quantity | price 
----+----------+----------+-------
  1 |        1 |        3 |   100
  2 |        2 |        5 |    50
  3 |        3 |        2 |   150
  4 |        4 |        1 |  1000
  5 |        5 |       10 |   500
  6 |        6 |        3 |  5000
  7 |        7 |        2 |  1000
  8 |        8 |        1 |  2000
  9 |        9 |        1 |  3000
(9 rows)


5. Stores:


sales=# select * from stores;
 id |        name        |   phone    |        email         |  city  | state | pincode 
----+--------------------+------------+----------------------+--------+-------+---------
  1 | Modern Store       | 9911991177 | modern@gmail.com     | FBD    | HR    |  121005
  2 | Sharma superstore  | 9911995577 | superstore@gmail.com | gaya   | BR    |  171105
  3 | Sri Balaji Store   | 9911171620 | balaji@gmail.com     | jaipur | RJ    |  341105
  4 | Sakshi superstore. | 9911171613 | sakshi@gmail.com     | FBD    | HR    |  121005
  5 | Sonu General Store | 9999900000 | general@gmail.com    | Noida  | UP    |  131005
(5 rows)





================================================ Describe a table ==================================================================


1. Customers:

                                     Table "public.customers"
   Column   |         Type          | Collation | Nullable |                Default                
------------+-----------------------+-----------+----------+---------------------------------------
 id         | integer               |           | not null | nextval('customers_id_seq'::regclass)
 first_name | character varying(20) |           |          | 
 last_name  | character varying(20) |           |          | 
 phone      | numeric               |           |          | 
 email      | character varying(20) |           |          | 
 city       | character varying(20) |           |          | 
 state      | character varying(20) |           |          | 
 pincode    | integer               |           |          | 
Indexes:
    "customers_pkey" PRIMARY KEY, btree (id)




2. Stores


                                    Table "public.stores"
 Column  |         Type          | Collation | Nullable |              Default               
---------+-----------------------+-----------+----------+------------------------------------
 id      | integer               |           | not null | nextval('stores_id_seq'::regclass)
 name    | character varying(20) |           |          | 
 phone   | numeric               |           |          | 
 email   | character varying(20) |           |          | 
 city    | character varying(20) |           |          | 
 state   | character varying(20) |           |          | 
 pincode | integer               |           |          | 
Indexes:
    "stores_pkey" PRIMARY KEY, btree (id)
Referenced by:
    TABLE "orders" CONSTRAINT "orders_store_id_fkey" FOREIGN KEY (store_id) REFERENCES stores(id)
    TABLE "staffs" CONSTRAINT "staff_store_id_fkey" FOREIGN KEY (store_id) REFERENCES stores(id)


3. Staffs


                                     Table "public.staffs"
   Column   |         Type          | Collation | Nullable |              Default              
------------+-----------------------+-----------+----------+-----------------------------------
 id         | integer               |           | not null | nextval('staff_id_seq'::regclass)
 first_name | character varying(20) |           |          | 
 last_name  | character varying(20) |           |          | 
 email      | character varying(20) |           |          | 
 phone      | numeric               |           |          | 
 active     | character varying(20) |           |          | 
 store_id   | integer               |           |          | 
Indexes:
    "staff_pkey" PRIMARY KEY, btree (id)
Foreign-key constraints:
    "staff_store_id_fkey" FOREIGN KEY (store_id) REFERENCES stores(id)
Referenced by:
    TABLE "orders" CONSTRAINT "orders_staff_id_fkey" FOREIGN KEY (staff_id) REFERENCES staffs(id)



4. Orders


                                      Table "public.orders"
    Column    |         Type          | Collation | Nullable |              Default               
--------------+-----------------------+-----------+----------+------------------------------------
 id           | integer               |           | not null | nextval('orders_id_seq'::regclass)
 customer_id  | integer               |           |          | 
 order_status | character varying(20) |           |          | 
 order_date   | date                  |           |          | 
 shipped_date | date                  |           |          | 
 store_id     | integer               |           |          | 
 staff_id     | integer               |           |          | 
Indexes:
    "orders_pkey" PRIMARY KEY, btree (id)
Foreign-key constraints:
    "orders_staff_id_fkey" FOREIGN KEY (staff_id) REFERENCES staffs(id)
    "orders_store_id_fkey" FOREIGN KEY (store_id) REFERENCES stores(id)
Referenced by:
    TABLE "order_items" CONSTRAINT "order_items_order_id_fkey" FOREIGN KEY (order_id) REFERENCES orders(id)



5. Order_items

                             Table "public.order_items"
  Column  |  Type   | Collation | Nullable |                 Default                 
----------+---------+-----------+----------+-----------------------------------------
 id       | integer |           | not null | nextval('order_items_id_seq'::regclass)
 order_id | integer |           |          | 
 quantity | integer |           |          | 
 price    | numeric |           |          | 
Indexes:
    "order_items_pkey" PRIMARY KEY, btree (id)
Foreign-key constraints:
    "order_items_order_id_fkey" FOREIGN KEY (order_id) REFERENCES orders(id)



=================================================== Practice Questions =================================================


1. Find name of customer,staff name,order status,store name,quantity,price


Solution:

	select c.first_name as customer,s.first_name as staff_name,o.order_status,st.name as store_name,oo.quantity,oo.price from staffs as s,
	customers as c,orders as o,order_items as oo,stores as st where c.id = o.customer_id AND o.id = oo.order_id AND st.id = o.store_id 
	AND s.id = o.staff_id AND o.id >2 ; 

 customer | staff_name | order_status |     store_name     | quantity | price 
----------+------------+--------------+--------------------+----------+-------
 sagar    | aman       | successful   | Sakshi superstore. |        2 |   150
 neeraj   | aman       | successful   | Sakshi superstore. |        1 |  1000
 neeraj   | nitish     | successful   | Sharma superstore  |       10 |   500
 ram      | mohan      | successful   | Sri Balaji Store   |        3 |  5000
 aman     | rohan      | successful   | Sonu General Store |        2 |  1000
 aman     | aman       | successful   | Sonu General Store |        1 |  2000
 nitish   | nitish     | successful   | Sonu General Store |        1 |  3000
(7 rows)


(INNER JOIN WAY)

select c.first_name as customer,s.first_name as staff_name,o.order_status,st.name as store_name,oo.quantity,oo.price from customers as c
INNER JOIN orders as o
ON c.id = o.customer_id
INNER JOIN staffs as s
ON s.id = o.staff_id
INNER JOIN stores as st
ON st.id = o.store_id
INNER JOIN order_items as oo
ON o.id = oo.order_id
;
 customer | staff_name | order_status |     store_name     | quantity | price 
----------+------------+--------------+--------------------+----------+-------
 sagar    | sohan      | successful   | Modern Store       |        3 |   100
 sagar    | sohan      | successful   | Modern Store       |        5 |    50
 sagar    | aman       | successful   | Sakshi superstore. |        2 |   150
 neeraj   | aman       | successful   | Sakshi superstore. |        1 |  1000
 neeraj   | nitish     | successful   | Sharma superstore  |       10 |   500
 ram      | mohan      | successful   | Sri Balaji Store   |        3 |  5000
 aman     | rohan      | successful   | Sonu General Store |        2 |  1000
 aman     | aman       | successful   | Sonu General Store |        1 |  2000
 nitish   | nitish     | successful   | Sonu General Store |        1 |  3000
(9 rows)



2. Find the name of customers have two orders

Solution:

	select c.first_name as customer,count(o.id) as numbers_of_orders from customers as c,orders as o where c.id = o.customer_id
	 group by c.first_name having count(o.id) > 2;

 customer | numbers_of_orders 
----------+-------------------
 sagar    |                 3
(1 row)


(INNER JOIN WAY)

select c.first_name as customer,count(o.id) as "number of orders " from customers as c
INNER JOIN orders as o
ON c.id = o.customer_id 
group by c.first_name 
having count(o.id) > 2 ;

 customer | number of orders  
----------+-------------------
 sagar    |                 3
(1 row)


3. How many order each customers

Solution:

	select c.first_name as "Customers name",count(o.customer_id) as "Numbers of orders" from orders as o,customers as c
	 where c.id = o.customer_id group by c.first_name;

 Customers name | Numbers of orders 
----------------+-------------------
 nitish         |                 1
 neeraj         |                 2
 ram            |                 1
 rinkesh        |                 2
 bindu          |                 1
 sagar          |                 3
 aman           |                 2
 mukesh         |                 1
(8 rows)


(INNER JOIN WAY)

select c.first_name as "customer Name",count(o.id) as "numbers of orders" from customers as c
INNER JOIN orders as o
ON c.id = o.customer_id
group by c.first_name
;
 customer Name | numbers of orders 
---------------+-------------------
 nitish        |                 1
 neeraj        |                 2
 ram           |                 1
 rinkesh       |                 2
 bindu         |                 1
 sagar         |                 3
 aman          |                 2
 mukesh        |                 1
(8 rows)



4. How many oder each customers taken more then 2 orders

Soultion

	select c.first_name as "Customers name",count(o.customer_id) as "Numbers of orders" from orders as o,customers as c
	 where c.id = o.customer_id group by c.first_name having count(o.customer_id) > 2;

 Customers name | Numbers of orders 
----------------+-------------------
 sagar          |                 3
(1 row)



(Inner Join way)

Solution

select c.first_name as "customer Name",count(o.id) as "numbers of orders" from customers as c
INNER JOIN orders as o
ON c.id = o.customer_id
group by c.first_name
having count(o.id) > 2;
 customer Name | numbers of orders 
---------------+-------------------
 sagar         |                 3
(1 row)



5. Differenece between order_date and shipped_date

Solution
	
	select id as order_id,age(shipped_date , order_date) as "difference b/w shipped_date" from orders;

 order_id | difference b/w shipped_date 
----------+-----------------------------
        1 | 7 days
        2 | 21 days
        4 | 1 day
        5 | 4 days
        6 | 2 days
        7 | 2 days
        8 | 28 days
        9 | 2 days
       10 | 5 days
       11 | 6 days
       12 | 2 days
        3 | 3 days
       13 | 3 mons 23 days
(13 rows)



6. find the name of staff and customer who email is " nitish@gmail.com"

Solution

	select c.first_name as "customer name",s.first_name as "staff name" from customers as c,orders as o,staffs as s
	 where c.id = o.customer_id AND s.id = o.staff_id AND s.email = 'nitish@gmail.com' AND c.email ='nitish@gmail.com';

 customer name | staff name 
---------------+------------
 nitish        | nitish
(1 row)


7. find the name of customer who also works as staff  

Solution:

	select c.first_name as "Intersection b/w staff and customer name" from customers as c,staffs as s,orders as o
	 where s.id = o.staff_id AND c.id = o.customer_id AND c.first_name = s.first_name;

 Intersection b/w staff and customer name 
------------------------------------------
 aman
 nitish
(2 rows)


(Second way)

	select first_name from customers INTERSECT select first_name from staffs;

 first_name 
------------
 nitish
 aman
(2 rows)



(Inner Join )


select c.first_name as "customer name",s.first_name as "staff name" from customers as c
INNER JOIN orders as o
ON o.customer_id = c.id
INNER JOIN staffs as s
ON s.id = o.staff_id
AND c.first_name = s.first_name
;

 customer name | staff name 
---------------+------------
 aman          | aman
 nitish        | nitish
(2 rows)



8. find the name of customer ,staff name,order status, store name with price =100

Solution

	 select c.first_name as customer,s.first_name as staff_name,o.order_status,st.name as store_name,oo.price from staffs as s,
        customers as c,orders as o,order_items as oo,stores as st where c.id = o.customer_id AND o.id = oo.order_id AND st.id = o.store_id
        AND s.id = o.staff_id AND oo.price = 100;

 customer | staff_name | order_status |  store_name  | price 
----------+------------+--------------+--------------+-------
 sagar    | sohan      | successful   | Modern Store |   100



(1 row)




9. For every state how many orders are there which are shipped  before 2020-10-19

Solution:

	select st.state,count(o.id) from orders as o,stores as st where st.id = o.staff_id AND o.shipped_date < '2020-10-19' group by st.state;


 state | count 
-------+-------
 BR    |     1
 UP    |     1
 RJ    |     1
 HR    |     5
(4 rows)

(Inner Join )


select st.state as "State Name",count(o.id) as " orders shipped " from stores as st
INNER JOIN orders as o
ON o.staff_id = st.id
AND o.shipped_date < '2020-10-19'
group by st.state;

 State Name |  orders shipped  
------------+------------------
 BR         |                1
 UP         |                1
 RJ         |                1
 HR         |                5
(4 rows)


10. Write a query to find the names of customer and staff that begin with ‘S’ 

Solution

	select c.first_name as "common and with last word a" from staffs as s,orders as o,customers as c where c.id = o.customer_id
	 AND s.id = o.staff_id AND c.first_name = s.first_name AND s.first_name LIKE 'a%';


 common and with last word a 
-----------------------------
 aman
(1 row)


(Inner Join )


select s.first_name as "staff Name",c.first_name as " Customer name " from staffs as s
INNER JOIN orders as o
ON o.staff_id = s.id
INNER JOIN customers as c
ON c.id = o.customer_id
AND c.first_name = s.first_name
AND c.first_name LIKE 'a%';
 staff Name |  Customer name  
------------+-----------------
 aman       | aman
(1 row)	


(Second way)


        select s.first_name as "End with a" from staffs as s
	 INNER JOIN orders as o 
	 ON s.id = o.staff_id
	 INNER JOIN customers as c
	 ON  c.id = o.customer_id 
	 AND c.first_name = s.first_name
	 AND s.first_name LIKE 'a%';

 End with a 
------------
 aman
(1 row)




11.  Write a query to get the current date.

Solution 


	 SELECT CURRENT_DATE ;

 current_date 
--------------
 2021-11-18
(1 row)


select now();
               now                
----------------------------------
 2021-11-18 12:43:52.721066+05:30
(1 row)


12. Write a query to retrieve the first four characters of  customer_name from the customers table.


Solution 


	select SUBSTRING(first_name,1,4) as "first fout characters substring" from customers;

 first fout characters substring 
---------------------------------
 aman
 niti
 muke
 bind
 rink
 park
 saga
 neer
 ram
 sita
(10 rows)


13. Write a query to fetch the first_name from the customer table in upper case and use the ALIAS name as customer name.


Solution:

	select UPPER(first_name) as "Customer Name" from customers;

 Customer Name 
---------------
 AMAN
 NITISH
 MUKESH
 BINDU
 RINKESH
 PARKESH
 SAGAR
 NEERAJ
 RAM
 SITA
(10 rows)




14. Write a query to create a new table which consists of data and structure copied from the other table.



Solution:

Step1:->	select * INTO clone from orders;
		SELECT 13



Step2:->(Show table clone)	 select * from clone;

 id | customer_id | order_status | order_date | shipped_date | store_id | staff_id 
----+-------------+--------------+------------+--------------+----------+----------
  1 |           1 | successful   | 2002-10-14 | 2002-10-21   |        1 |        1
  2 |           1 | successful   | 2008-08-11 | 2008-09-01   |        1 |        1
  4 |           2 | successful   | 2010-10-11 | 2010-10-12   |        4 |        4
  5 |           2 | successful   | 2012-12-11 | 2012-12-15   |        2 |        5
  6 |           3 | successful   | 2012-11-13 | 2012-11-15   |        3 |        2
  7 |           5 | successful   | 2010-11-13 | 2010-11-15   |        5 |        3
  8 |           5 | successful   | 2012-10-13 | 2012-11-10   |        5 |        4
  9 |           6 | successful   | 2021-01-13 | 2021-01-15   |        5 |        5
 10 |           7 | successful   | 2021-01-15 | 2021-01-20   |        4 |        2
 11 |           8 | successful   | 2020-12-15 | 2020-12-21   |        1 |        3
 12 |           9 | successful   | 2020-10-17 | 2020-10-19   |        3 |        1
  3 |           1 | successful   | 2010-09-11 | 2010-09-14   |        4 |        4
 13 |           9 | successful   | 2020-11-21 | 2021-03-14   |        2 |        5
(13 rows)



15. Write a query to fetch top N records.


Solution:

	SELECT * FROM customers ORDER BY first_name DESC LIMIT 5;
 id | first_name | last_name |   phone    |       email       |  city   | state | pincode 
----+------------+-----------+------------+-------------------+---------+-------+---------
  4 | sita       | devi      | 9999001155 | sita@gmail.com    | gaya    | BR    |  351211
  1 | sagar      | sharma    | 9911991199 | sagar@gmail.com   | FBD     | HR    |  121001
  9 | rinkesh    |           | 9999000001 | rinkesh@gmail.com | ambala  | HR    |  121006
  3 | ram        |           | 6611001155 | ram@gmail.com     | gaya    | BR    |  351211
 10 | parkesh    | sharma    | 9999115522 | parkesh@gmail.com | sonipat | HR    |  131006
(5 rows)




16.      Write a query to retrieve the first_name and last_name in a single column as “FullName”.
	 The first name and the last name must be separated with space.

Solution

	SELECT id,concat(first_name,' ',last_name) from customers order by first_name;
 id |     concat     
----+----------------
  5 | aman sharma
  8 | bindu devi
  7 | mukesh sharma
  2 | neeraj sharma
  6 | nitish kumar
 10 | parkesh sharma
  3 | ram  
  9 | rinkesh 
  1 | sagar sharma
  4 | sita devi 
(10 rows)



17.  Write a query find number of orders whose orders_date is between 02/05/2010 to 31/10/2021 and are grouped according to order_id


Solution:
	
	
	select id,count(id),order_date from orders where order_date between '2015-05-02' AND '2021-10-31' group by id  order by id DESC;
 id | count | order_date 
----+-------+------------
 13 |     1 | 2020-11-21
 12 |     1 | 2020-10-17
 11 |     1 | 2020-12-15
 10 |     1 | 2021-01-15
  9 |     1 | 2021-01-13
(5 rows)


18.  	Write a query to fetch all the records from the customers table ordered by Last_name in descending order
	 and state in the ascending order.


Solution:
	
	 select * from customers order by first_name DESC , state ASC;
 id | first_name | last_name |   phone    |       email       |  city   | state | pincode 
----+------------+-----------+------------+-------------------+---------+-------+---------
  4 | sita       | devi      | 9999001155 | sita@gmail.com    | gaya    | BR    |  351211
  1 | sagar      | sharma    | 9911991199 | sagar@gmail.com   | FBD     | HR    |  121001
  9 | rinkesh    |           | 9999000001 | rinkesh@gmail.com | ambala  | HR    |  121006
  3 | ram        |           | 6611001155 | ram@gmail.com     | gaya    | BR    |  351211
 10 | parkesh    | sharma    | 9999115522 | parkesh@gmail.com | sonipat | HR    |  131006
  6 | nitish     | kumar     | 9999000000 | nitish@gmail.com  | FBD     | HR    |  121004
  2 | neeraj     | sharma    | 6611881199 | neeraj@gmail.com  | FBD     | HR    |  121001
  7 | mukesh     | sharma    | 9999015151 | mukesh@gmail.com  | jaipur  | RJ    |  121004
  8 | bindu      | devi      | 9999000151 | bindu@gmail.com   | ponda   | GOA   |  131204
  5 | aman       | sharma    | 9999002222 | aman@gmail.com    | gaya    | UP    |  351211
(10 rows)




19.  Write a query to fetch details of all customer excluding the Customer with first names, “Aman” and “Nitish” from the Customer table.
	


Solution :

	select * from customers where first_name NOT IN ('aman','nitish')  order by first_name;
 id | first_name | last_name |   phone    |       email       |  city   | state | pincode 
----+------------+-----------+------------+-------------------+---------+-------+---------
  8 | bindu      | devi      | 9999000151 | bindu@gmail.com   | ponda   | GOA   |  131204
  7 | mukesh     | sharma    | 9999015151 | mukesh@gmail.com  | jaipur  | RJ    |  121004
  2 | neeraj     | sharma    | 6611881199 | neeraj@gmail.com  | FBD     | HR    |  121001
 10 | parkesh    | sharma    | 9999115522 | parkesh@gmail.com | sonipat | HR    |  131006
  3 | ram        |           | 6611001155 | ram@gmail.com     | gaya    | BR    |  351211
  9 | rinkesh    |           | 9999000001 | rinkesh@gmail.com | ambala  | HR    |  121006
  1 | sagar      | sharma    | 9911991199 | sagar@gmail.com   | FBD     | HR    |  121001
  4 | sita       | devi      | 9999001155 | sita@gmail.com    | gaya    | BR    |  351211
(8 rows)



20.  Write a query to fetch details of customer with the state  as “BR)”.

Solution

	select * from customers as c where c.state = 'BR';
 id | first_name | last_name |   phone    |     email      | city | state | pincode 
----+------------+-----------+------------+----------------+------+-------+---------
  3 | ram        |           | 6611001155 | ram@gmail.com  | gaya | BR    |  351211
  4 | sita       | devi      | 9999001155 | sita@gmail.com | gaya | BR    |  351211
(2 rows)



21.  Write a query to calculate the even records from a table.

Solution:


	select * from customers where id % 2 = 0 order by id ;
 id | first_name | last_name |   phone    |       email       |  city   | state | pincode 
----+------------+-----------+------------+-------------------+---------+-------+---------
  2 | neeraj     | sharma    | 6611881199 | neeraj@gmail.com  | FBD     | HR    |  121001
  4 | sita       | devi      | 9999001155 | sita@gmail.com    | gaya    | BR    |  351211
  6 | nitish     | kumar     | 9999000000 | nitish@gmail.com  | FBD     | HR    |  121004
  8 | bindu      | devi      | 9999000151 | bindu@gmail.com   | ponda   | GOA   |  131204
 10 | parkesh    | sharma    | 9999115522 | parkesh@gmail.com | sonipat | HR    |  131006
(5 rows)
	


	select * from customers where id % 2 != 0 order by id ;
 id | first_name | last_name |   phone    |       email       |  city  | state | pincode 
----+------------+-----------+------------+-------------------+--------+-------+---------
  1 | sagar      | sharma    | 9911991199 | sagar@gmail.com   | FBD    | HR    |  121001
  3 | ram        |           | 6611001155 | ram@gmail.com     | gaya   | BR    |  351211
  5 | aman       | sharma    | 9999002222 | aman@gmail.com    | gaya   | UP    |  351211
  7 | mukesh     | sharma    | 9999015151 | mukesh@gmail.com  | jaipur | RJ    |  121004
  9 | rinkesh    |           | 9999000001 | rinkesh@gmail.com | ambala | HR    |  121006
(5 rows)



22. Write a query to retrieve two minimum and maximum price from the order_items table.


Solution

	select price as minimum from customers as c, orders as o,order_items as oo where c.id = o.customer_id AND o.id = oo.order_id
	  order by price LIMIT 2;

 minimum 
---------
      50
     100
(2 rows)


	price as maximum from customers as c, orders as o,order_items as oo where c.id = o.customer_id AND o.id = oo.order_id 
	 order by price DESC LIMIT 2;
 maximum 
---------
    5000
    3000
(2 rows)




23. Write a query to find the third-highest price from the order_items table.

Solution


	select price from customers as c, orders as o,order_items as oo where c.id = o.customer_id AND o.id = oo.order_id 
	 order by price DESC limit 1 offset 2;

 price 
-------
  2000
(1 row)


24. Write a query to display the first and the last record from the customers table.

Solution:

	(select * from customers order by id limit 1) UNION (select * from customers order by id limit 1 offset 9);

 id | first_name | last_name |   phone    |       email       |  city   | state | pincode 
----+------------+-----------+------------+-------------------+---------+-------+---------
  1 | sagar      | sharma    | 9911991199 | sagar@gmail.com   | FBD     | HR    |  121001
 10 | parkesh    | sharma    | 9999115522 | parkesh@gmail.com | sonipat | HR    |  131006
(2 rows)
	

25.  Write a query to fetch 50% records from the Customers table.

Solution :

	




















=============================================================Database==============================================================

1.  Database name -> Flipkart



============================================================Tables==================================================================

2. Orders		

select * from orders;
 id | order_date | shipped_date | order_amount | payment_id |              shipped_address               | user_id | product_id 
----+------------+--------------+--------------+------------+--------------------------------------------+---------+------------
  1 | 2018-11-20 | 2018-11-30   |        42990 |          1 | 2nd Main Kanteerava Nagar, Nandhini Layout |       1 |          1
  2 | 2019-12-20 | 2019-12-23   |        13495 |          3 | 2nd Main Kanteerava Nagar, Nandhini Layout |       1 |          2
  3 | 2020-12-20 | 2021-01-10   |         8499 |          2 | 2nd Main Kanteerava Nagar, Nandhini Layout |       1 |          4
  4 | 2010-11-20 | 2010-12-01   |       127000 |          5 | 136, Veperyhighrd, Periamet                |       4 |          5
  5 | 2012-01-20 | 2012-01-25   |       127000 |          5 | 35, Kandappa St, Vepery                    |       5 |          5
  6 | 2013-01-21 | 2013-01-24   |         1139 |          1 | 35, Kandappa St, Vepery                    |       5 |          3
  7 | 2014-04-15 | 2014-05-25   |        42990 |          4 | 134, Veperyhighrd, Periamet                |       3 |          1
  8 | 2015-03-15 | 2015-03-25   |       127000 |          5 | 406, Blue Chip Cplx, Sayajigunj            |       6 |          5
  9 | 2016-05-10 | 2016-05-17   |        13495 |          2 | 406, Blue Chip Cplx, Sayajigunj            |       6 |          2
 10 | 2016-05-15 | 2016-05-17   |         1139 |          3 | 406, Blue Chip Cplx, Sayajigunj            |       6 |          3
 11 | 2018-06-17 | 2018-06-20   |         8499 |          2 | 51,Samman Bazart                           |       2 |          4
 12 | 2018-06-17 | 2018-06-20   |        13495 |          5 | 51,Samman Bazart                           |       2 |          2
 13 | 2021-11-17 | 2021-12-01   |        42990 |          3 | 8/24 Sanjay colony                         |       7 |          1
 15 | 2019-10-12 | 2019-10-19   |       179900 |          5 | 51,Samman Bazart                           |       2 |          7
 16 | 2020-10-14 | 2020-10-16   |         6999 |          3 | 2nd Main Kanteerava Nagar, Nandhini Layout |       1 |          8
 14 | 2019-10-12 | 2019-10-19   |       169000 |          1 | 2nd Main Kanteerava Nagar, Nandhini Layout |       1 |          6
 17 | 2017-11-14 | 2017-11-17   |       219000 |          5 | 8/24 Sanjay colony                         |       7 |          9
(17 rows)


3. product_categories

	select * from product_categories;
 id |   category_name    
----+--------------------
  1 | Electronics
  2 | Sports
  4 | Clothing
  5 | Home
  3 | Beauty,Toys & more
(5 rows)


4. Products

select * from products;
 id |  name   | price  |   size   |     color      | category_id |                                description                                
----+---------+--------+----------+----------------+-------------+---------------------------------------------------------------------------
  2 | Shoes   |  13495 | 8        | Black          |           2 | Air Zoom Vomero 16 Running Shoes For Men
  3 | Shampoo |   1139 | 250 ml   | White          |           3 | LOréal Professionnel Xtenso Care Shampoo
  4 | Jacket  |   8499 | XL       | Dark Brown     |           4 | Full Sleeve Solid Men Riding Jacket
  5 | Bed     | 127000 | Queen    | Choco          |           5 | mozart Solid Wood Queen Bed
  1 | Laptop  |  42990 | 14 Inch  | Arctic Grey    |           1 | Lenovo Ideapad Slim3 Core i3 11th Gen - (8 GB/256 GB SSD/Windows 10 Home)
  7 | TV      | 179900 | 55 inch  |                |           1 | LG OLED Ultra HD (4K) Smart TV  (OLED55BXPTA)
  8 | Grip    |   6999 | 55 inch  | Sunblaze-White |           2 | PUMA FUTURE Z Grip 1 Hybrid Goalkeeping Gloves
  9 | Sofa    | 219000 |          | Brown          |           5 | WLI Fabric 3 + 2 + 1 Brown Sofa Set 
  6 | Mobile  | 169000 | 6.7 inch | Graphite       |           1 | APPLE iPhone 13 Pro Max (Graphite, 1 TB)
(9 rows)


5. Users

	select * from users;
 id | fname  |  lname  |   phone    |      email       |  city   | state |                  address                   
----+--------+---------+------------+------------------+---------+-------+--------------------------------------------
  1 | sagar  | sharma  | 9999900000 | sagar@gmail.com  | FBD     | HR    | 2nd Main Kanteerava Nagar, Nandhini Layout
  4 | sohan  | kumar   | 9999923012 | sohan@gmail.com  | gaya    | UP    | 136, Veperyhighrd, Periamet
  5 | kajal  |         | 9999923015 | kajal@gmail.com  | KGG     | BR    | 35, Kandappa St, Vepery
  3 | satyam | kumar   | 9999900012 | satyam@gmail.com | Noida   | UP    | 134, Veperyhighrd, Periamet
  6 | aman   | verma   | 9999923415 | aman@gmail.com   | rohtak  | HR    | 406, Blue Chip Cplx, Sayajigunj
  2 | Om     | parkesh | 9999900012 | om@gmail.com     | Delhi   | Delhi | 51,Samman Bazart
  7 | Mohan  | panday  | 9990023415 | mohan@gmail.com  | sonipat | HR    | 8/24 Sanjay colony
(7 rows)


6. Payment

	select * from payment;
 id |          payment_type           
----+---------------------------------
  1 | Pay on delivery
  2 | Credit/Debit card
  3 | Net Banking
  4 | Unified Payment Interface (UPI)
  5 | Easy Monthly Installments (EMI)
(5 rows)



====================================================== Describe a table ================================================================

7. Orders
	

				Table "public.orders"
     Column      |          Type          | Collation | Nullable |              Default               
-----------------+------------------------+-----------+----------+------------------------------------
 id              | integer                |           | not null | nextval('orders_id_seq'::regclass)
 order_date      | date                   |           |          | 
 shipped_date    | date                   |           |          | 
 order_amount    | numeric                |           |          | 
 payment_id      | integer                |           |          | 
 shipped_address | character varying(100) |           |          | 
 user_id         | integer                |           |          | 
 product_id      | integer                |           |          | 
Indexes:
    "orders_pkey" PRIMARY KEY, btree (id)
Foreign-key constraints:
    "orders_payment_id_fkey" FOREIGN KEY (payment_id) REFERENCES payment(id)
    "orders_product_id_fkey" FOREIGN KEY (product_id) REFERENCES products(id)
    "orders_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id)




8. Payment

	 			 Table "public.payment"
    Column    |         Type          | Collation | Nullable |               Default               
--------------+-----------------------+-----------+----------+-------------------------------------
 id           | integer               |           | not null | nextval('payment_id_seq'::regclass)
 payment_type | character varying(50) |           |          | 
Indexes:
    "payment_pkey" PRIMARY KEY, btree (id)
Referenced by:
    TABLE "orders" CONSTRAINT "orders_payment_id_fkey" FOREIGN KEY (payment_id) REFERENCES payment(id)



9. Products

	                                      Table "public.products"
   Column    |          Type          | Collation | Nullable |               Default                
-------------+------------------------+-----------+----------+--------------------------------------
 id          | integer                |           | not null | nextval('products_id_seq'::regclass)
 name        | character varying(20)  |           |          | 
 price       | numeric                |           |          | 
 size        | character varying(10)  |           |          | 
 color       | character varying(20)  |           |          | 
 categery_id | integer                |           |          | 
 description | character varying(500) |           |          | 
Indexes:
    "products_pkey" PRIMARY KEY, btree (id)
Foreign-key constraints:
    "products_categery_id_fkey" FOREIGN KEY (categery_id) REFERENCES product_categories(id)
Referenced by:
    TABLE "orders" CONSTRAINT "orders_product_id_fkey" FOREIGN KEY (product_id) REFERENCES products(id)


10. Product_categories

	                  Table "public.product_categories"
    Column     |         Type          | Collation | Nullable |                    Default                     
---------------+-----------------------+-----------+----------+------------------------------------------------
 id            | integer               |           | not null | nextval('product_categories_id_seq'::regclass)
 categery_name | character varying(30) |           |          | 
Indexes:
    "product_categories_pkey" PRIMARY KEY, btree (id)
Referenced by:
    TABLE "products" CONSTRAINT "products_categery_id_fkey" FOREIGN KEY (categery_id) REFERENCES product_categories(id)


11. Users

	 Table "public.users"
 Column  |         Type          | Collation | Nullable |              Default              
---------+-----------------------+-----------+----------+-----------------------------------
 id      | integer               |           | not null | nextval('users_id_seq'::regclass)
 fname   | character varying(20) |           |          | 
 lname   | character varying(20) |           |          | 
 phone   | numeric               |           |          | 
 email   | character varying(20) |           |          | 
 city    | character varying(20) |           |          | 
 state   | character varying(20) |           |          | 
 address | character varying(50) |           |          | 
Indexes:
    "users_pkey" PRIMARY KEY, btree (id)
Referenced by:
    TABLE "orders" CONSTRAINT "orders_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id)

=========================================================== Practices Questions ===============================================================


1. What is sum all Electronics products

Solution:
	
	
	select pc.id as "Product_categories",sum(p.price) as " Total price of Electronics product" from products as p,orders as o,
        product_categories as pc where p.id = o.product_id AND pc.id = 1 AND p.id IN
         (select p.id from products as p,orders as o,product_categories as pc where pc.id = p.category_id AND p.id =o.product_id AND pc.id = 1)
         group by pc.id ;

 Product_categories |  Total price of Electronics product 
--------------------+-------------------------------------
                  1 |                              477870
(1 row)


2. How manu orders each Users

solution:

  select u.fname,count(o.id)as "Numbers of orders" from users as u,orders as o where u.id = o.user_id group by u.fname;

 fname  | Numbers of orders 
--------+-------------------
 sohan  |                 1
 Mohan  |                 1
 Om     |                 3
 satyam |                 1
 kajal  |                 2
 sagar  |                 6
 aman   |                 3
(7 rows)



 3. As an output we need a list of all userid and the total payment received from them in the year 2018.
 
 Solution:
 
 	select u.id as " User id",sum(o.order_amount) as "Total shoping " from orders as o,users as u where u.id = o.user_id AND o.id IN
 	 ( select o.id from users as u,orders as o where u.id = o.user_id AND o.order_date between '2018-01-01' AND '2018-12-31') 
 	 group by u.fname,u.id;
 
  User id | Total shoping  
----------+----------------
        1 |          42990
        2 |          21994
(2 rows)


4. As an output we need a list of all userid, user name and the total payment received

Solution:

	select u.id as " User id",u.fname as " Users name ",sum(o.order_amount) as "Total shoping " from orders as o,users as u 
	where u.id = o.user_id AND o.id IN ( select o.id from users as u,orders as o where u.id = o.user_id )
	 group by u.fname,u.id order by u.id;
 
  User id |  Users name  | Total shoping  
----------+--------------+----------------:
        1 | sagar        |         240983
        2 | Om           |         201894
        3 | satyam       |          42990
        4 | sohan        |         127000
        5 | kajal        |         128139
        6 | aman         |         141634
        7 | Mohan        |         261990


5. We need a list of all userids which have bought for  50,000 Between 150000 Rs. of value in 2013 but not bought at all in 2013.

Solution:

 select u.id as "User ID" from users as u, orders as o where u.id = o.user_id AND o.order_amount between '50000' AND '150000' AND o.order_date Not between '2013-01-01' AND '2013-12-31' group by u.id order by u.id;
 User ID 
---------
       4
       5
       6
(3 rows)


6. List out the catogery  and number of product in that category with total sum of all product in that category 

Solution:


	select pc.category_name as " Product category",count(p.id) as " Total product in this category",
	sum(o.order_amount) as "Sum of purchage product in that catogery" from products as p,orders as o,product_categories as pc
	 where pc.id = p.category_id AND p.id =o.product_id group by pc.category_name order by pc.category_name;

  Product category  |  Total product in this category | Sum of purchage product in that catogery 
--------------------+---------------------------------+------------------------------------------
 Beauty,Toys & more |                               2 |                                     2278
 Clothing           |                               2 |                                    16998
 Electronics        |                               5 |                                   477870
 Home               |                               4 |                                   600000
 Sports             |                               4 |                                    47484
(5 rows)



7.  As an output we need a list of all users who have in the year 2018, bought from category called le“Home” but
	 not bought from category called “Electronics”. 


Solution:

	select u.fname from users as u,product_categories as pc,products as p,orders as o where pc.id = p.category_id AND p.id = o.product_id
	 AND u.id = o.user_id AND o.order_date between '2017-01-01' AND '2018-12-31'  AND pc.category_name = 'Home' AND NOT pc.id =2;

 fname 
-------
 sagar
(1 row)
 


8. Query To Find Name and Second Highest price Of A Products?

Solution:

 select name as "product name",price  from products order by price DESC limit 1 offset 1 ;

 product name | price  
--------------+--------
 TV           | 179900
(1 row)



9. Find th esum of all the Element in Electronic accept mobile?

Solution:

	select sum(p.price) as "Sum of all Electronics prodeuct Not Mobile" from products as p,product_categories as pc,orders as o
	 where pc.id = p.category_id AND p.id =o.product_id AND  p.id IN (select p.id from products as p ,orders as o,product_categories as pc
	 where p.id = o.product_id AND pc.id = p.category_id AND pc.id =1 AND NOT p.name ='Mobile') ;

 Sum of all Electronics prodeuct Not Mobile 
--------------------------------------------
                                     308870
(1 row)



10. Find the order id,days and product name whose shipped time is greater then 10 days;

Solution:

	select o.id as "order ID",o.shipped_date-o.order_date as Days,p.name as " Products Name" from products as p,orders as o
	 where p.id = o.product_id AND o.id IN (select id  from orders where shipped_date-order_date>10);

 order ID | days |  Products Name 
----------+------+----------------
        3 |   21 | Jacket
        4 |   11 | Bed
        7 |   40 | Laptop
       13 |   14 | Laptop
(4 rows)


11. List out all the product which have been order under Electronics AND Home Categories ?

Solution:

	select p.name from orders as o,products as p,product_categories as pc where p.id = o.product_id AND pc.id = p.category_id AND
	 pc.category_name = 'Electronics'  group by p.id  Union select p.name from orders as o,products as p,product_categories as pc
	 where p.id = o.product_id AND pc.id = p.category_id AND pc.category_name = 'Home' group by p.name ;

  name  
--------
 Mobile
 Sofa
 Laptop
 Bed
 TV
(5 rows)


12. Find the name of users whose payment mode is net banking;

Solution:


	select u.fname as "user name" from users as u,orders as o,payment as p where p.id = o.payment_id AND u.id = o.user_id
	 AND p.payment_type = 'Net Banking' group by u.fname;

 user name 
-----------
 aman
 Mohan
 sagar
(3 rows)



13. :

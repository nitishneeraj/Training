----------------------------------------------Time------------------------------------------------------------


1. Time
	: Time is an abstraction of dates and times.
	: Since Ruby 1.9.2, Time implementation uses a signed 63 bit integer, Bignum or Rational. 
	
	
	
	-> : Creating a new Time instance
	Ex: 	3.0.2 :013 > Time.new(2002)
		 => 2002-01-01 00:00:00 +0530 
		3.0.2 :014 > Time.new(2002)
		 => 2002-01-01 00:00:00 +0530 
		3.0.2 :015 > Time.new(2002, 10, 31)
		 => 2002-10-31 00:00:00 +0530 
		3.0.2 :016 > Time.new(2002, 10, 31, 2, 2, 2, "+02:00") 
		 => 2002-10-31 02:02:02 +0200
		3.0.2 :018 > Time.at(628232400) 
 		=> 1989-11-28 10:30:00 +0530 

		
	-> : Working with an instance of Time
	Ex: 	3.0.2 :018 > Time.at(628232400) 
		 => 1989-11-28 10:30:00 +0530 
		3.0.2 :019 > t = Time.new(1993, 02, 24, 12, 0, 0, "+09:00")
		 => 1993-02-24 12:00:00 +0900 
		3.0.2 :020 > t.monday? 
		 => false 
		3.0.2 :023 > t.year
		 => 1993 
		3.0.2 :024 > t.dst?
		 => false 
		3.0.2 :025 > t + (60*60*24*365) 
		 => 1994-02-24 12:00:00 +0900 
		3.0.2 :026 > t.to_i
		 => 730522800 
		3.0.2 :028 > t2 = Time.new(2011)
		 => 2011-01-01 00:00:00 +0530 
		3.0.2 :029 > t1 = Time.new(2010)
		 => 2010-01-01 00:00:00 +0530 
		3.0.2 :030 > t1 == t2 
		 => false 
		3.0.2 :031 > t1 == t1 
		 => true 
		3.0.2 :032 > 
		3.0.2 :033 > Time.new(2010,10,31).between?(t1, t2) 
		 => true 

-------------------------------------------------------Public class Method --------------------------------------------------------

	-> : 
	Ex:	3.0.2 :034 > Time.at(0) 
		 => 1970-01-01 05:30:00 +0530 
		3.0.2 :035 > Time.at(Time.at(0))
		 => 1970-01-01 05:30:00 +0530 
		3.0.2 :036 > Time.at(946702800)   
		 => 2000-01-01 10:30:00 +0530 
		3.0.2 :037 > Time.at(1582721899, in: "UTC")  
		 => 2020-02-26 12:58:19 UTC 
		3.0.2 :038 > Time.at(1582721899, in: "C") 
		 => 2020-02-26 15:58:19 +0300 
		3.0.2 :039 > Time.at(1582721899, in: "+09:00")  
		 => 2020-02-26 21:58:19 +0900 
		3.0.2 :040 > Time.at(946684800, 123456.789).nsec  
		 => 123456789 


	-> : gm(year) → timeclick to toggle source
		gm(year, month) → time
		gm(year, month, day) → time
		gm(year, month, day, hour) → time
		gm(year, month, day, hour, min) → time	
		
	Ex: 	3.0.2 :041 > Time.utc(2000,"jan",1,20,15,1)
		 => 2000-01-01 20:15:01 UTC 
		3.0.2 :042 > Time.gm(2000,"jan",1,20,15,1) 
		 => 2000-01-01 20:15:01 UTC 


	-> : 	local(year) → timeclick to toggle source
		local(year, month) → time
		local(year, month, day) → time
		local(year, month, day, hour) → time
		
		
	Ex: 	3.0.2 :043 > Time.local(2000,"jan",1,20,15,1) 
 		=> 2000-01-01 20:15:01 +0530 
 	
 	-> : new → timeclick to toggle source
	   : new(year, month=nil, day=nil, hour=nil, min=nil, sec=nil, tz=nil) → time
	   
	   Ex:  3.0.2 :047 > "%.6f" % a.to_f 
		 => "1635835909.176229" 
		3.0.2 :048 > "%.6f" % b.to_f 
		 => "1635835924.989113" 
		3.0.2 :049 > Time.new(2008,6,21, 13,30,0, "+09:00")
		 => 2008-06-21 13:30:00 +0900 
		 
		 
		 
	-> : # A trip for RubyConf 2007
	Ex: 	3.0.2 :049 > Time.new(2008,6,21, 13,30,0, "+09:00")
		 => 2008-06-21 13:30:00 +0900 
		3.0.2 :050 > t1 = Time.new(2007,11,1,15,25,0, "+09:00") # JST (Narita)
		 => 2007-11-01 15:25:00 +0900 
		3.0.2 :051 > t2 = Time.new(2007,11,1,12, 5,0, "-05:00") # CDT (Minneapolis)
		 => 2007-11-01 12:05:00 -0500 
		3.0.2 :052 > t3 = Time.new(2007,11,1,13,25,0, "-05:00") # CDT (Minneapolis)
		 => 2007-11-01 13:25:00 -0500 
		3.0.2 :053 > t4 = Time.new(2007,11,1,16,53,0, "-04:00") # EDT (Charlotte)
		 => 2007-11-01 16:53:00 -0400 
		3.0.2 :054 > t5 = Time.new(2007,11,5, 9,24,0, "-05:00") # EST (Charlotte)
		 => 2007-11-05 09:24:00 -0500 
		3.0.2 :055 > t6 = Time.new(2007,11,5,11,21,0, "-05:00") # EST (Detroit)
		 => 2007-11-05 11:21:00 -0500 
		3.0.2 :056 > t7 = Time.new(2007,11,5,13,45,0, "-05:00") # EST (Detroit)
		 => 2007-11-05 13:45:00 -0500 
		3.0.2 :057 > t8 = Time.new(2007,11,6,17,10,0, "+09:00") # JST (Narita)
		 => 2007-11-06 17:10:00 +0900 
		3.0.2 :058 > (t2-t1)/3600.0  
		 => 10.666666666666666 
		3.0.2 :059 > (t4-t3)/3600.0 
		 => 2.466666666666667 
		3.0.2 :060 > (t6-t5)/3600.0 
		 => 1.95 
		 
	-> : now → time
	Ex: 	3.0.2 :062 > Time.new
		 => 2021-11-02 12:29:51.473146816 +0530 
		3.0.2 :063 > Time.now
		 => 2021-11-02 12:30:01.629893798 +0530
		
	-> : utc(year) → timeclick to toggle source
		utc(year, month) → time
		utc(year, month, day) → time
		utc(year, month, day, hour) → time
		
		Ex: 	3.0.2 :064 > Time.utc(2000,"jan",1,20,15,1)
			 => 2000-01-01 20:15:01 UTC 
			3.0.2 :065 > Time.gm(2000,"jan",1,20,15,1) 
			 => 2000-01-01 20:15:01 UTC 
		
		-----------------------------------Public Instance Methods------------------------------------------------ 	 
	-> : time + numeric → time
	Ex: 	3.0.2 :068 > t = Time.now
		 => 2021-11-02 12:37:21.876799888 +0530 
		3.0.2 :069 > t + (60 * 60 * 24) 
		 => 2021-11-03 12:37:21.876799888 +0530
		 
	-> : time - other_time → floatclick to toggle source
	     time - numeric → time
	 Ex: 	3.0.2 :070 > t = Time.now
		 => 2021-11-02 12:38:56.366268708 +0530 
		3.0.2 :071 > t2 = t + 2592000 
		 => 2021-12-02 12:38:56.366268708 +0530 
		3.0.2 :073 > t2 - t 
		 => 2592000.0 
		3.0.2 :074 > t2 - 2592000 
		 => 2021-11-02 12:38:56.366268708 +0530 
		 
	-> : time <=> other_time → -1, 0, +1, or nil
	Ex: 	3.0.2 :075 > t = Time.now 
		 => 2021-11-02 12:41:30.868733334 +0530 
		3.0.2 :076 > t2 = t + 2592000
		 => 2021-12-02 12:41:30.868733334 +0530 
		3.0.2 :077 > t <=> t2 
		 => -1 
		3.0.2 :078 > t2 <=> t 
		 => 1 
		3.0.2 :079 > t = Time.now 
		 => 2021-11-02 12:42:00.76455928 +0530 
		3.0.2 :080 >  t2 = t + 0.1 
		 => 2021-11-02 12:42:00 12167590160149076062509/14073748835532800000000 +0530 
		3.0.2 :081 > t.nsec  
		 => 764559280 
		3.0.2 :082 > t2.nsec  
		 => 864559280 
		3.0.2 :083 > t <=> t2 
		 => -1 
		3.0.2 :084 > t2 <=> t 
		 => 1 
		 
	-> : asctime → string
	Ex: 	3.0.2 :087 > t = Time.utc(2010,3,30, 5,43,25.0123456789r)
		 => 2010-03-30 05:43:25 123456789/10000000000 UTC 
		3.0.2 :088 > t.ceil 
		 => 2010-03-30 05:43:26 UTC 
		3.0.2 :089 > t.ceil(0)
		 => 2010-03-30 05:43:26 UTC 
		3.0.2 :090 > t.ceil(1) 
		 => 2010-03-30 05:43:25.1 UTC 
		3.0.2 :091 > t.ceil(2) 
		 => 2010-03-30 05:43:25.02 UTC 
		3.0.2 :092 > t.ceil(3) 
		 => 2010-03-30 05:43:25.013 UTC 
		3.0.2 :093 > t.ceil(4) 
		 => 2010-03-30 05:43:25.0124 UTC 
		3.0.2 :094 > t = Time.utc(1999,12,31, 23,59,59)
		 => 1999-12-31 23:59:59 UTC 
		3.0.2 :095 > (t + 0.4).ceil
		 => 2000-01-01 00:00:00 UTC 
		3.0.2 :096 > (t + 1.4).ceil  
		 => 2000-01-01 00:00:01 UTC 
		3.0.2 :097 > t = Time.utc(1999,12,31, 23,59,59)
		 => 1999-12-31 23:59:59 UTC 
		 
	-> : day → integer
	Ex: 	3.0.2 :098 > t = Time.now
		 => 2021-11-02 13:04:55.622446162 +0530 
		3.0.2 :099 > t.day 
		 => 2 
		3.0.2 :100 > t.mday 
		 => 2 
		 
	-> : dst? → true or false(Returns true if time occurs during Daylight Saving Time in its time zone.)
	Ex: 	3.0.2 :101 > Time.local(2000, 1, 1).zone
		 => "IST" 
		3.0.2 :102 > Time.local(2000, 1, 1).isdst 
		 => false 
		3.0.2 :103 >   Time.local(2000, 1, 1).dst?
		 => false 
		3.0.2 :104 > Time.local(2000, 7, 1).isdst 
		 => false 
		3.0.2 :105 > Time.local(2000, 7, 1).dst?
		 => false 
		 
	-> : friday? → true or false
	Ex: 	3.0.2 :106 > t = Time.local(1987, 12, 18)
		 => 1987-12-18 00:00:00 +0530 
		3.0.2 :107 > t.friday?
		 => true 
		 
	-> : getgm → new_time
	Ex: 	3.0.2 :108 > t = Time.local(2000,1,1,20,15,1)
		 => 2000-01-01 20:15:01 +0530 
		3.0.2 :109 > t.gmt? 
		 => false 
		3.0.2 :110 > y = t.getgm                        
		 => 2000-01-01 14:45:01 UTC 
		3.0.2 :111 > y.gmt?  
		 => true 
		3.0.2 :112 > t == y 
		 => true 
		 
	-> : getlocal → new_time
	Ex:	 3.0.2 :113 > t = Time.utc(2000,1,1,20,15,1)
		 => 2000-01-01 20:15:01 UTC 
		3.0.2 :114 > l = t.getlocal 
		 => 2000-01-02 01:45:01 +0530 
		3.0.2 :115 > l.utc? 
		 => false 
		 
	-> : getutc → new_time
	Ex: 	3.0.2 :116 > t = Time.local(2000,1,1,20,15,1)
		 => 2000-01-01 20:15:01 +0530 
		3.0.2 :117 > t.gmt?  
		 => false 
		3.0.2 :118 > y = t.getgm  
		 => 2000-01-01 14:45:01 UTC 
		3.0.2 :119 > y.gmt? 
		 => true 
		3.0.2 :120 > t == y   
		 => true
		 
	-> : gmt? → true or false
	Ex: 	3.0.2 :121 > t = Time.now 
		 => 2021-11-02 14:02:53.149065871 +0530 
		3.0.2 :122 > t.utc?
		 => false 
		3.0.2 :123 > t = Time.gm(2000,"jan",1,20,15,1)
		 => 2000-01-01 20:15:01 UTC 
		3.0.2 :124 > t.utc?  
		 => true 
		3.0.2 :125 > t = Time.now
		 => 2021-11-02 14:03:16.852024203 +0530 
		3.0.2 :126 > t.gmt?
		 => false 
		3.0.2 :127 > t = Time.gm(2000,1,1,20,15,1) 
		 => 2000-01-01 20:15:01 UTC 
		3.0.2 :128 > t.gmt?  
		 => true 
		 
	-> : gmt_offset → integer
	Ex: 	3.0.2 :129 > t = Time.gm(2000,1,1,20,15,1)
		 => 2000-01-01 20:15:01 UTC 
		3.0.2 :130 > t.gmt_offset 
		 => 0 
		3.0.2 :131 > l = t.getlocal 
		 => 2000-01-02 01:45:01 +0530 
		3.0.2 :132 > l.gmt_offset  
		 => 19800
		 
	-> : gmtime → time
	Ex: 	3.0.2 :133 > t = Time.now 
		 => 2021-11-02 14:06:17.512587855 +0530 
		3.0.2 :134 > t.gmt? 
		 => false 
		3.0.2 :135 > t.gmtime 
		 => 2021-11-02 08:36:17.512587855 UTC 
		3.0.2 :136 > t.gmt? 
		 => true 
		3.0.2 :137 > t = Time.now
		 => 2021-11-02 14:06:41.940630283 +0530 
		3.0.2 :138 > t.utc? 
		 => false 
		3.0.2 :139 > t.utc 
		 => 2021-11-02 08:36:41.940630283 UTC 
		3.0.2 :140 > t.utc? 
		 => true 
		 
	-> : gmtoff → integer
	Ex: 	3.0.2 :141 > t = Time.gm(2000,1,1,20,15,1) 
		 => 2000-01-01 20:15:01 UTC 
		3.0.2 :142 > t.gmt_offset 
		 => 0 
		3.0.2 :143 > l = t.getlocal 
		 => 2000-01-02 01:45:01 +0530 
		3.0.2 :144 > l.gmt_offset
		 => 19800 
		 
	-> : hour → integer
	Ex: 	3.0.2 :145 > t = Time.now
		 => 2021-11-02 14:10:42.684397558 +0530 
		3.0.2 :146 > t.hour
		 => 14 
		 
	-> : inspect → string
	Ex: 
		







 




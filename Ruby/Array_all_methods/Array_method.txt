----------------------------------Array-------------------------------------------------------------

1. Array
	: An Array is an ordered, integer-indexed collection of objects, called elements. Any object may be an Array element.
	: Array indexing starts at 0, as in C or Java.
	: A negative index is an offset, backwards, from the end of the array
		.Index -1 indicates the last element.
		.Index -2 indicates the next-to-last element.
	
2. Creating Arrays
	Ex: 	3.0.2 :001 > ary = [1, "two", 3.0] 
		 => [1, "two", 3.0] 
		3.0.2 :002 > ary = Array.new 
		 => [] 
		3.0.2 :003 > Array.new(3) 
		 => [nil, nil, nil] 
		3.0.2 :004 > Array.new(3, true)
		 => [true, true, true] 
		3.0.2 :005 > Array.new(4) {Hash.new} 
		 => [{}, {}, {}, {}] 
		3.0.2 :006 > Array.new(4) {|i| i.to_s }
		 => ["0", "1", "2", "3"] 
		3.0.2 :007 > empty_table = Array.new(3) {Array.new(3)}
		 => [[nil, nil, nil], [nil, nil, nil], [nil, nil, nil]] 
		3.0.2 :008 > Array({:a => "a", :b => "b"})
		 => [[:a, "a"], [:b, "b"]] 


	-> : Accessing Elements
	Ex: 	3.0.2 :009 > arr = [1, 2, 3, 4, 5, 6]
		 => [1, 2, 3, 4, 5, 6] 
		3.0.2 :010 > arr[2]  
		 => 3 
		3.0.2 :011 > arr[100]
		 => nil 
		3.0.2 :012 > arr[-3]
		 => 4 
		3.0.2 :013 > arr[2, 3] 
		 => [3, 4, 5] 
		3.0.2 :014 > arr[1..4] 
		 => [2, 3, 4, 5] 
		3.0.2 :015 > arr[1..-3]
		 => [2, 3, 4] 
		3.0.2 :016 > arr.at(0) 
		 => 1 
		3.0.2 :017 > arr = ['a', 'b', 'c', 'd', 'e', 'f']
		 => ["a", "b", "c", "d", "e", "f"] 
		3.0.2 :018 > arr.fetch(100) 
		(irb):18:in `fetch': index 100 outside of array bounds: -6...6 (IndexError)
		3.0.2 :019 > arr.fetch(100, "oops")
		 => "oops" 
		3.0.2 :020 > arr.first
		 => "a" 
		3.0.2 :021 > arr.last 
		 => "f" 
		3.0.2 :022 > arr.take(3)
		 => ["a", "b", "c"] 
		3.0.2 :023 > arr.drop(3) 
		 => ["d", "e", "f"] 
		 
		 
	-> : Obtaining Information about an Array
	Ex: 	3.0.2 :024 > browsers = ['Chrome', 'Firefox', 'Safari', 'Opera', 'IE']
		 => ["Chrome", "Firefox", "Safari", "Opera", "IE"] 
		3.0.2 :025 > browsers.length 
		 => 5 
		3.0.2 :026 > browsers.count
		 => 5 
		3.0.2 :027 > browsers.empty?
		 => false 
		3.0.2 :028 > browsers.include?('Konqueror') 
		 => false 
		 
	-> : Adding Items to Arrays\
	Ex: 	3.0.2 :029 > arr = [1, 2, 3, 4]
		 => [1, 2, 3, 4] 
		3.0.2 :030 > arr.push(5)
		 => [1, 2, 3, 4, 5] 
		3.0.2 :031 > arr << 6 
		 => [1, 2, 3, 4, 5, 6] 
		3.0.2 :032 > arr.unshift(0)
		 => [0, 1, 2, 3, 4, 5, 6] 
		3.0.2 :033 > arr.insert(3, 'apple')
		 => [0, 1, 2, "apple", 3, 4, 5, 6] 
		3.0.2 :034 > arr.insert(3, 'orange', 'pear', 'grapefruit')
		 => [0, 1, 2, "orange", "pear", "grapefruit", "apple", 3, 4, 5, 6] 
		 
	-> : Removing Items from an Array
	Ex: 	3.0.2 :035 > arr =  [1, 2, 3, 4, 5, 6]
		 => [1, 2, 3, 4, 5, 6] 
		3.0.2 :036 > arr.pop
		 => 6 
		3.0.2 :037 > arr
		 => [1, 2, 3, 4, 5] 
		3.0.2 :038 > arr.shift
		 => 1 
		3.0.2 :039 > arr 
		 => [2, 3, 4, 5] 
		3.0.2 :040 > arr.delete_at(2)
		 => 4 
		3.0.2 :041 > arr 
		 => [2, 3, 5] 
		3.0.2 :042 > arr = [1, 2, 2, 3]
		 => [1, 2, 2, 3] 
		3.0.2 :043 > arr.delete(2) 
		 => 2 
		3.0.2 :044 > arr
		 => [1, 3] 
		3.0.2 :045 > arr = ['foo', 0, nil, 'bar', 7, 'baz', nil]
		 => ["foo", 0, nil, "bar", 7, "baz", nil] 
		3.0.2 :046 > arr.compact
		 => ["foo", 0, "bar", 7, "baz"] 
		3.0.2 :047 > arr   
		 => ["foo", 0, nil, "bar", 7, "baz", nil] 
		3.0.2 :048 > arr.compact!
		 => ["foo", 0, "bar", 7, "baz"] 
		3.0.2 :049 > arr
		 => ["foo", 0, "bar", 7, "baz"] 
		3.0.2 :050 > arr = [2, 5, 6, 556, 6, 6, 8, 9, 0, 123, 556]
		 => [2, 5, 6, 556, 6, 6, 8, 9, 0, 123, 556] 
		3.0.2 :051 > arr.uniq
		 => [2, 5, 6, 556, 8, 9, 0, 123] 

		 
	-> : Iterating over Arrays
	Ex: 	3.0.2 :050 > arr = [2, 5, 6, 556, 6, 6, 8, 9, 0, 123, 556]
		 => [2, 5, 6, 556, 6, 6, 8, 9, 0, 123, 556] 
		3.0.2 :051 > arr.uniq
		 => [2, 5, 6, 556, 8, 9, 0, 123] 
		3.0.2 :052 > arr = [1, 2, 3, 4, 5]
		 => [1, 2, 3, 4, 5] 
		3.0.2 :053 > arr.each {|a| print a -= 10, " "}
		-9 -8 -7 -6 -5  => [1, 2, 3, 4, 5] 
		3.0.2 :054 > words = %w[first second third fourth fifth sixth]
		 => ["first", "second", "third", "fourth", "fifth", "sixth"] 
		3.0.2 :055 > str = ""
		 => "" 
		3.0.2 :056 > words.reverse_each {|word| str += "#{word} "}
		 => ["first", "second", "third", "fourth", "fifth", "sixth"] 
		3.0.2 :057 > arr.map {|a| 2*a} 
		 => [2, 4, 6, 8, 10] 
		3.0.2 :058 > arr    
		 => [1, 2, 3, 4, 5] 
		3.0.2 :059 > arr.map! {|a| a**2}
		 => [1, 4, 9, 16, 25] 
		3.0.2 :060 > arr 
		 => [1, 4, 9, 16, 25] 
		 
	-> : Selecting Items from an Array
	: Non-destructive Selection
	Ex:	 3.0.2 :061 > arr = [1, 2, 3, 4, 5, 6]
		 => [1, 2, 3, 4, 5, 6] 
		3.0.2 :062 > arr.select {|a| a > 3} 
		 => [4, 5, 6] 
		3.0.2 :063 > arr.reject {|a| a < 3}
		 => [3, 4, 5, 6] 
		3.0.2 :064 > arr.drop_while {|a| a < 4}
		 => [4, 5, 6] 
		3.0.2 :065 > arr 
		 => [1, 2, 3, 4, 5, 6] 


	-> : Destructive Selection
	Ex: 	3.0.2 :066 > arr.delete_if {|a| a < 4} 
		 => [4, 5, 6] 
		3.0.2 :067 > arr  
		 => [4, 5, 6] 
		3.0.2 :068 > arr = [1, 2, 3, 4, 5, 6]
		 => [1, 2, 3, 4, 5, 6] 
		3.0.2 :069 > arr.keep_if {|a| a < 4}
		 => [1, 2, 3] 
		3.0.2 :070 > arr
		 => [1, 2, 3] 

--------------------------------------------------------- Public class method------------------------------------------

2. [](*args)
	Ex: 	3.0.2 :071 > Array.[]( 1, 'a', /^A/)
		 => [1, "a", /^A/] 
		3.0.2 :072 > Array[ 1, 'a', /^A/ ] 
		 => [1, "a", /^A/] 
		3.0.2 :073 > [ 1, 'a', /^A/ ] 
		 => [1, "a", /^A/] 


	-> : new → new_empty_arrayclick to toggle source
	   : new(array) → new_array
	   : new(size) → new_array
	   : new(size, default_value) → new_array
	   : new(size) {|index| ... } → new_array
	   Ex: 	3.0.2 :074 > a = Array.new([:foo, 'bar', 2])
			 => [:foo, "bar", 2] 
			3.0.2 :075 > a.class
			 => Array 
			3.0.2 :076 > a
			 => [:foo, "bar", 2] 
			 
	-> :	 3.0.2 :074 > a = Array.new([:foo, 'bar', 2])
		 => [:foo, "bar", 2] 
		3.0.2 :075 > a.class
		 => Array 
		3.0.2 :076 > a
		 => [:foo, "bar", 2] 
		3.0.2 :077 > a = Array.new(3)
		 => [nil, nil, nil] 
		3.0.2 :078 > a = Array.new(3, 'x')
		 => ["x", "x", "x"] 
		3.0.2 :079 > a
		 => ["x", "x", "x"] 
		3.0.2 :080 > a = Array.new(3) {|index| "Element #{index}" }
		 => ["Element 0", "Element 1", "Element 2"] 


	----------------------------------------Public Instance methos ----------------------------------------
	
3. array & other_array → new_array
	Ex: 	3.0.2 :081 > [0, 1, 2, 3] & [1, 2]
		 => [1, 2] 
		3.0.2 :082 > [0, 1, 0, 1] & [0, 1] 
		 => [0, 1] 
		3.0.2 :083 > [0, 1, 2] & [3, 2, 1, 0]
		 => [0, 1, 2] 
		 
	-> : array * n → new_array
	Ex: 	3.0.2 :084 > a = ['x', 'y']
		 => ["x", "y"] 
		3.0.2 :085 > a * 3
		 => ["x", "y", "x", "y", "x", "y"] 
		3.0.2 :086 > [0, [0, 1], {foo: 0}] * ', '
		 => "0, 0, 1, {:foo=>0}" 
		 
		 
	-> : array + other_array → new_array
	Ex: 	3.0.2 :087 > a = [0, 1] + [2, 3]
		 => [0, 1, 2, 3] 
		3.0.2 :088 > a
		 => [0, 1, 2, 3] 
		 
	-> : array - other_array → new_array
	Ex: 	3.0.2 :089 > [0, 1, 1, 2, 1, 1, 3, 1, 1] - [1]
		 => [0, 2, 3] 
		3.0.2 :090 > [0, 1, 2, 3] - [3, 0] 
		 => [1, 2] 
		3.0.2 :091 > [0, 1, 2] - [4] 
		 => [0, 1, 2] 
		 
	-> : array << object → self
	Ex: 	3.0.2 :092 > a = [:foo, 'bar', 2]
		 => [:foo, "bar", 2] 
		3.0.2 :093 > a << :baz 
		 => [:foo, "bar", 2, :baz] 
		3.0.2 :094 > a = [:foo, 'bar', 2]
		 => [:foo, "bar", 2] 
		3.0.2 :097 > a1 = a << [3, 4]
		 => [:foo, "bar", 2, [3, 4]] 
		3.0.2 :098 > a1
		 => [:foo, "bar", 2, [3, 4]] 
	
	-> : array <=> other_array → -1, 0, or 1
	Ex:	3.0.2 :099 > [0, 1, 2] <=> [0, 1, 3]
		 => -1 
		3.0.2 :100 > [0, 1, 2] <=> [0, 1, 1]
		 => 1 
		3.0.2 :101 > [0, 1, 2] <=> [0, 1, 2, 3] 
		 => -1 
		3.0.2 :103 > [0, 1, 2] <=> [0, 1] 
		 => 1 
		3.0.2 :104 > [0, 1, 2] <=> [0, 1, 2]
		 => 0 
		 
	-> : array == other_array → true or false
	Ex: 	3.0.2 :105 > a0 = [:foo, 'bar', 2]
		 => [:foo, "bar", 2] 
		3.0.2 :106 > a1 = [:foo, 'bar', 2.0]
		 => [:foo, "bar", 2.0] 
		3.0.2 :107 > a1 == a0
		 => true 
		3.0.2 :108 > [] == []
		 => true 
		 
	-> : 	array[index] → object or nilclick to toggle source
		array[start, length] → object or nil
		array[range] → object or nil
		array[aseq] → object or nil
		slice(index) → object or nil
		slice(start, length) → object or nil
		slice(range) → object or nil
		slice(aseq) → object or nil
	Ex: 	3.0.2 :109 > a = [:foo, 'bar', 2]
		 => [:foo, "bar", 2] 
		3.0.2 :110 > a[0] 
		 => :foo 
		3.0.2 :111 > a[2] 
		 => 2 
		3.0.2 :112 > a
		 => [:foo, "bar", 2] 
		3.0.2 :113 > a = [:foo, 'bar', 2]
		 => [:foo, "bar", 2] 
		3.0.2 :114 > a[-1]
		 => 2 
		3.0.2 :115 > a[-2] 
		 => "bar" 
		3.0.2 :116 > a = [:foo, 'bar', 2]
		 => [:foo, "bar", 2] 
		3.0.2 :117 > a[0, 2]
		 => [:foo, "bar"] 
		3.0.2 :118 > a[1, 2]
		 => ["bar", 2] 
		3.0.2 :119 > a = [:foo, 'bar', 2]
		 => [:foo, "bar", 2] 
		3.0.2 :120 > a[0, 4] 
		 => [:foo, "bar", 2] 
		3.0.2 :121 > a[1, 3]
		 => ["bar", 2] 
		3.0.2 :122 > a[2, 2]
		 => [2] 
		3.0.2 :123 > a = [:foo, 'bar', 2]
		 => [:foo, "bar", 2] 
		3.0.2 :124 > a[-1..2]
		 => [2] 
		3.0.2 :125 > a[-2..2]
		 => ["bar", 2] 
		3.0.2 :126 > a[-3..2] 
		 => [:foo, "bar", 2] 
		3.0.2 :127 > a = [:foo, 'bar', 2]
		 => [:foo, "bar", 2] 
		3.0.2 :128 > a[4..1]
		 => nil 
		3.0.2 :129 > a[4..1]
		 => nil 
		3.0.2 :130 > a[4..-1]
		 => nil 
	
	-> : 







	






